# Copyright (C) 2015  Niklas Rosenstein
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
''' Craftr is a meta build system for Ninja. '''

__author__ = 'Niklas Rosenstein <rosensteinniklas(at)gmail.com>'
__version__ = '2.0.0-dev'

import sys
if sys.version < '3.4':
  raise EnvironmentError('craftr requires Python3.4')

from craftr import magic

session = magic.new_context('session')
module = magic.new_context('module')

from craftr import ext, path
from craftr.env import Environment


class Session(object):
  ''' The `Session` object is the overseer for the process of loading
  and executing craftr modules. It manages the module loading process,
  a global configuration `Environment` and some global scope tasks such
  as resolving identifiers to concrete objects. '''

  def __init__(self):
    super().__init__()
    self.env = Environment()
    self.modules = {}

  def on_context_enter(self, prev):
    if prev is not None:
      raise RuntimeError('session context can not be nested')

  def on_context_leave(self):
    ''' Remove all `craftr.ext.` modules from `sys.modules` and make
    sure they're all in `Session.modules` (the modules are expected
    to be put there by the `craftr.ext.CraftrImporter`). '''

    for key, module in list(sys.modules.items()):
      if key.startswith('craftr.ext.'):
        name = key[11:]
        assert name in self.modules and self.modules[name] is module, key
        del sys.modules[key]
        try:
          # Remove the module from the `craftr.ext` modules contents, too.
          delattr(ext, name.split('.')[0])
        except AttributeError:
          pass


class Target(object):
  ''' This class represents a build target that is directly translated
  to ninja build definitions. When being rendered to a Ninja file,
  dollar characters are not escaped, allowing you to use variables in
  your build command.

  Attributes:
    name: The name of the target. This is usually deduced from the
      variable the target is assigned to if no explicit name was
      passed to the `Target` constructor. Note that the actualy
      identifier of the target that can be passed to Ninja is
      concatenated with the `module` identifier.
    module: A Craftr extension module which this target belongs to. It
      can be specified on construction manually, or the current active
      module is used automatically.
    command: A list of strings that represents the command to execute.
    inputs: A list of filenames that are listed as direct inputs.
    outputs: A list of filenames that are generated by the target.
    implicit_deps: A list of filenames that mark the target as dirty
      if they changed and will cause it to be rebuilt, but that are
      not taken as direct input files (i.e. `$in` does not expand these
      files).
    order_only_deps: See "Order-only dependencies" in the [Ninja Manual][].
    foreach: A boolean value that determines if the command is appliead
      for each pair of filenames in `inputs` and `outputs`, or invoked
      only once. Note that if this is True, the number of elements in
      `inputs` and `outputs` must match!
    description: A description of the target to display when it is being
      built. This ends up as a variable definition to the target's rule,
      so you may use variables in this as well.
    pool: The name of the build pool. Defaults to None. Can be "console"
      for "targets" that don't actually build files but run a program.
      Craftr ensures that targets in the "console" pool are never
      executed implicitly when running Ninja.  # xxx: todo!
    vars: A dictionary of additional variables that are available for
      expansion in the target's rule.

  [Ninja Manual]: https://ninja-build.org/manual.html
  '''

  def __init__(self, command, inputs, outputs, implicit_deps=None,
      order_only_deps=None, foreach=False, description=None, pool=None,
      vars=None, module=None, name=None):

    if not module:
      module = globals()['module']()
    if not name:
      name = magic.get_assigned_name(magic.get_module_frame(module))
    if foreach and len(inputs) != len(outputs):
      raise ValueError('number of input files must match number of output files')
    if not command:
      raise ValueError('command can not be empty')

    self.module = module
    self.name = name
    self.command = command
    self.input = inputs
    self.outputs = outputs
    self.implicit_deps = implicit_deps
    self.order_only_deps = order_only_deps
    self.foreach = foreach
    self.description = description
    self.pool = pool
    self.vars = {}
    if vars:
      self.vars.update(vars)

  def __repr__(self):
    pool = ' in "{0}"'.format(self.pool) if self.pool else ''
    command = ' running "{0}"'.format(self.command[0])
    return '<Target {self.fullname!r}{command}{pool}>'.format(**locals())

  @property
  def fullname(self):
    return self.module.__craftr_ident__ + '.' + self.name


def init_module(module):
  ''' Called when a craftr module is being imported before it is
  executed to initialize its contents. '''

  assert module.__name__.startswith('craftr.ext.')
  module.__craftr_ident__ = module.__name__[11:]
  module.project_dir = path.dirname(module.__file__)
