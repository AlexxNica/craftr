# -*- mode: python -*-
# Copyright (C) 2015  Niklas Rosenstein
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

__all__ = ['detect', 'LlvmCompiler', 'Compiler', 'Linker']

from craftr import *
from craftr.ext.compiler import *
from craftr.ext import platform
from functools import partial
import re


def _search(pattern, subject, mode=0):
  ''' Performs `re.search()` and returns a list of the captured groups,
  *including* the complete matched string as the first group. If the
  regex search was unsuccessful, a list with that many items containing
  None is returned. '''

  pattern = re.compile(pattern, mode)
  ngroups = pattern.groups + 1

  res = pattern.search(subject)
  if not res:
    return [None] * ngroups
  else:
    groups = list(res.groups())
    groups.insert(0, res.group(0))
    return groups


def _flatten(iterable):
  for item in iterable:
    yield from item


def detect(program, _mode='llvm'):
  ''' Tries to detect the version information of the LLVM *program*
  by calling it with the `-v` option and returns a dictionary of the
  extracted information. Raises `ToolDetectionError` if the information
  could not be retrieved (eg. if *program* does not exist or is not an
  LLVM or GCC compiler based on *_mode*). '''

  try:
    output = shell.pipe([program, '-v']).output
  except FileNotFoundError as exc:
    raise ValueError(exc)
  if _mode == 'llvm':
    version = _search(r'^.*(clang|llvm)\s+version\s+([\d\.\-]+).*$', output, re.I | re.M)
    target = _search(r'Target:\s*([\w\-\._]+)', output, re.I)[1]
    thread_model = _search(r'Thread\s+model:\s*([\w\-\._]+)', output, re.I)[1]
    if not all(version):
      raise ToolDetectionError('could not determine LLVM version')
  elif _mode == 'gcc':
    version = _search(r'^.*(gcc)\s+version\s+([\d\.\-]+).*\s*$', output, re.I | re.M)
    target = _search(r'Target:\s*([\w\-\._]+)', output, re.I)[1]
    thread_model = _search(r'--enable-threads=([\w\-\._]+)', output)[1]
    if not all(version):
      raise ToolDetectionError('could not determine GCC version')
  else:
    raise ValueError('invalid _mode: {0!r}'.format(_mode))

  return {
    'version': version[2],
    'version_str': version[0].strip(),
    'name': version[1],
    'target': target,
    'thread_model': thread_model,
  }


class LlvmCompiler(BaseCompiler):
  ''' Interface for the LLVM compiler. '''

  name = 'LLVM'
  _supported_compilers = ('gcc', 'clang', 'llvm')

  def __init__(self, program, language, desc=None, **kwargs):
    super().__init__(program=program, language=language, **kwargs)
    if not desc:
      desc = detect(program)
    self.desc = desc
    self.version = desc['version']
    self.name = desc['name'].lower()
    assert self.name in ('gcc', 'clang', 'llvm'), self.name

  def compile(self, sources, frameworks=(), target_name=None, meta=None, **kwargs):
    '''
    Supported options:

      * include
      * defines
      * language
      * debug
      * std
      * pedantic
      * pic
      * warn
      * optimize
      * autodeps
      * description
      * osx_fwpath
      * osx_frameworks
      * program
      * additional_flags
      * gcc_additional_flags
      * llvm_additional_flags

    Target meta variables: *none*
    '''

    builder = self.builder(sources, frameworks, kwargs, name=target_name, meta=meta)
    objects = gen_objects(builder.inputs, suffix=platform.obj)
    fw = builder.add_framework(builder.name)

    include = set(builder.merge('include'))
    defines = set(builder.merge('defines'))
    language = builder['language']
    debug = builder.get('debug', False)
    std = builder.get('std')
    pedantic = builder.get('pedantic', False)
    pic = builder.get('pic', False)
    warn = builder.get('warn', 'all')
    optimize = builder.get('optimize', None)
    autodeps = builder.get('autodeps', True)
    description = builder.get('description', None)
    if not description:
      description = '{0} compile $out'.format(self.name)

    if platform.name == 'Darwin':
      osx_fwpath = builder.merge('osx_fwpath')
      osx_frameworks = builder.merge('osx_frameworks')
    else:
      osx_fwpath = []
      osx_frameworks = []

    if language not in (None, 'c', 'c++', 'asm'):
      raise ValueError('invalid language: {0}'.format(language))
    if language == 'c++':
      if self.name in ('llvm', 'clang'):
        fw['libs'] = ['c++']
      elif self.name == 'gcc':
        fw['libs'] = ['stdc++']
      else:
        assert False

    if language == 'asm':
      language = 'assembler'

    command = [builder['program']]
    command += ['-x', language] if language else []
    command += ['-c', '$in', '-o', '$out']
    command += ['-g'] if debug else []
    command += ['-std=' + std] if std else []
    command += ['-pedantic'] if pedantic else []
    command += ['-I' + x for x in include]
    command += ['-D' + x for x in defines]
    command += ['-fPIC'] if pic else []
    command += ['-F' + x for x in osx_fwpath]
    command += _flatten(['-framework', x] for x in osx_frameworks)

    if warn == 'all':
      command += ['-Wall']
    elif warn == 'none':
      command += ['-w']
    elif warn is None:
      pass
    else:
      builder.invalid_option('warn')

    if debug:
      if optimize and optimize != 'debug':
        builder.invalid_option('optimize', cause='no optimize with debug enabled')
    elif optimize == 'speed':
      command += ['-O4']
    elif optimize == 'size':
      commandm += ['-Os']
    elif optimize in ('debug', 'none', None):
      command += ['-O0']
    else:
      builder.invalid_option('optimize')

    if autodeps:
      builder.target['depfile'] = '$out.d'
      builder.target['deps'] = 'gcc'
      command += ['-MD', '-MP', '-MF', '$depfile']

    command += builder.merge('additional_flags')
    if self.name in ('clang', 'llvm'):
      command += builder.merge('llvm_additional_flags')
    elif self.name == 'gcc':
      command += builder.merge('gcc_additional_flags')
    else:
      assert False, self.name

    return builder.create_target(command, outputs=objects, foreach=True,
      description=description)

  def link(self, output, inputs, output_type='bin', frameworks=(),
      target_name=None, meta=None, **kwargs):
    '''
    Supported options:

      * lib
      * gcc_libs
      * llvm_libs
      * linker_args
      * gcc_linker_args
      * llvm_linker_args
      * linker_script
      * libpath
      * external_libs
      * osx_fwpath
      * osx_frameworks
      * description
      * program
      * additional_flags
      * gcc_additional_flags
      * llvm_additional_flags

    Target meta variables:

      * link_output -- The output filename of the link operation.
    '''

    builder = self.builder(inputs, frameworks, kwargs, name=target_name)

    if output_type not in ('bin', 'dll'):
      raise ValueError('invalid output_type: {0!r}'.format(output_type))
    output = gen_output(output, suffix=getattr(platform, output_type))
    implicit_deps = []

    libs = builder.merge('libs')
    # Clang is based on GCC libraries, so always use the gcc_libs option.
    libs += builder.merge('gcc_libs')
    if self.name in ('clang', 'llvm'):
      # We also use this class for GCC in which case the llvm_libs
      # option should not be handled!
      libs += builder.merge('llvm_libs')

    linker_args = builder.merge('linker_args')
    linker_args += builder.merge('gcc_linker_args')
    if self.name in ('clang', 'llvm'):
      linker_args += builder.merge('llvm_linker_args')

    linker_script = builder.get('linker_script', None)
    if linker_script:
      implicit_deps.append(linker_script)
      linker_args += ['-T', linker_script]

    libpath = builder.merge('libpath')
    external_libs = builder.merge('external_libs')
    implicit_deps += external_libs

    if platform.name == 'mac':
      osx_fwpath = builder.merge('osx_fwpath')
      osx_frameworks = builder.merge('osx_frameworks')
    else:
      osx_fwpath = []
      osx_frameworks = []

    description = builder.get('description', None)
    if not description:
      description = '{0} Link $out'.format(self.name)

    command = [builder['program'], '$in']
    command += ['-l' + x for x in set(libs)]
    command += ['-L' + x for x in set(libpath)]
    command += set(external_libs)
    command += ['-dynamic'] if output_type == 'dll' else []
    command += ['-F' + x for x in osx_fwpath]
    command += _flatten(['-framework', x] for x in osx_frameworks)
    if linker_args:
      command += ['-Wl,' + ','.join(linker_args)]
    command += builder.merge('additional_flags')
    if self.name in ('clang', 'llvm'):
      command += builder.merge('llvm_additional_flags')
    elif self.name == 'gcc':
      command += builder.merge('gcc_additional_flags')
    else:
      assert False, self.name
    command += ['-o', '$out']

    builder.meta['link_output'] = output
    return builder.create_target(command, outputs=[output],
      implicit_deps=implicit_deps, description=description)



Compiler = LlvmCompiler
Linker = partial(LlvmCompiler, language='c')
