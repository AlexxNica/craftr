# -*- mode: python -*-
# Copyright (C) 2015  Niklas Rosenstein
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

from craftr import path, expand_inputs, Target, Framework
from craftr.warn import invalid_option
from craftr.utils import fw_merge
from craftr.ext import platform
from craftr.ext.compiler import gen_objects, gen_output, _BaseCompiler
from functools import partial


def flatten(iterable):
  for item in iterable:
    yield from item


class LlvmCompiler(_BaseCompiler):
  ''' Interface for the LLVM compiler. '''

  name = 'LLVM'

  def __init__(self, program, language, **kwargs):
    super().__init__(program=program, language=language, **kwargs)

  def compile(self, sources, frameworks=(), target_name=None, **kwargs):
    join = self._settings(frameworks, kwargs)
    target = Target.Builder('llvm.compile', name=target_name, foreach=True,
      frameworks=frameworks)
    _warn_prefix = target.fullname

    include = set(join.get_merge('include'))
    defines = set(join.get_merge('defines'))
    language = join['language']
    debug = join.get('debug', False)
    std = join.get('std')
    pedantic = join.get('pedantic', False)
    pic = join.get('pic', False)
    warn = join.get('warn', 'all')
    optimize = join.get('optimize', None)
    autodeps = join.get('autodeps', True)
    description = join.get('description', 'LLVM Compile Object($out)')

    if platform.name == 'Darwin':
      osx_fwpath = join.get_merge('osx_fwpath')
      osx_frameworks = join.get_merge('osx_frameworks')
    else:
      osx_fwpath = []
      osx_frameworks = []

    sources = expand_inputs(sources)
    objects = gen_objects(sources, suffix=platform.obj)
    fw = Framework(target.fullname)

    if language not in ('c', 'c++'):
      raise ValueError('invalid language: {0}'.format(language))
    if language == 'c++':
      fw['libs'] = ['c++']

    command = [join['program'], '-x', language, '-c', '$in', '-o', '$out']
    command += ['-g'] if debug else []
    command += ['-std=' + std] if std else []
    command += ['-pedantic'] if pedantic else []
    command += ['-I' + x for x in include]
    command += ['-D' + x for x in defines]
    command += ['-fPIC'] if pic else []
    command += ['-F' + x for x in osx_fwpath]
    command += flatten(['-framework', x] for x in osx_frameworks)

    if warn == 'all':
      command += ['-Wall']
    elif warn == 'none':
      command += ['-w']
    elif warn is None:
      pass
    else:
      invalid_option('warn', warn)

    if debug:
      if optimize and optimize != 'debug':
        invalid_option('optimize', optimize, detail='no optimize with debug enabled')
    elif optimize == 'speed':
      command += ['-O4']
    elif optimize == 'size':
      commandm += ['-Os']
    elif optimize in ('debug', 'none', None):
      command += ['-O0']
    else:
      invalid_option('optimize', optimize)

    if autodeps:
      target.depfile = '$out.d'
      target.deps = 'gcc'
      command += ['-MMD', '-MF', '$depfile']

    command += join.get_merge('additional_flags')

    self._warn_unused(join, kwargs, target.fullname)
    target.frameworks.append(fw)
    return target(command, sources, objects, description=description)

  def link(self, output, inputs, output_type='bin', frameworks=(), target_name=None, **kwargs):
    join = self._settings(frameworks, kwargs)
    target = Target.Builder('llvm.link', name=target_name, frameworks=frameworks)
    inputs = expand_inputs(inputs, join)

    if output_type not in ('bin', 'dll'):
      raise ValueError('invalid output_type: {0!r}'.format(output_type))
    output = gen_output(output, suffix=getattr(platform, output_type))

    libs = set(join.get_merge('libs'))
    libpath = set(join.get_merge('libpath'))
    external_libs = set(join.get_merge('external_libs'))

    if platform.name == 'Darwin':
      osx_fwpath = join.get_merge('osx_fwpath')
      osx_frameworks = join.get_merge('osx_frameworks')
    else:
      osx_fwpath = []
      osx_frameworks = []

    command = [join['program'], '$in']
    command += ['-l' + x for x in libs]
    command += ['-L' + x for x in libpath]
    command += external_libs
    command += ['-dynamic'] if output_type == 'dll' else []
    command += ['-F' + x for x in osx_fwpath]
    command += flatten(['-framework', x] for x in osx_frameworks)
    command += join.get_merge('additional_flags')
    command += ['-o', '$out']

    return target(command, inputs, [output], implicit_deps=external_libs)


CCompiler = LlvmCompiler(program='clang', language='c')
CxxCompiler = LlvmCompiler(program='clang++', language='c++')
Linker = CCompiler()
from craftr.ext.unix import Ar as Archiver
