# -*- mode: python -*-
# Copyright (C) 2015  Niklas Rosenstein
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

from craftr import module, path, magic, warn, Framework
import collections


def gen_output(output, subdir=None, suffix=None):
  if isinstance(output, str):
    if not path.isabs(output):
      pdir = path.join(module.__ident__, subdir) if subdir else module.__ident__
      output = path.join(pdir, output)
    if suffix is not None:
      if callable(suffix):
        output = suffix(output)
      else:
        output = path.addsuffix(output, suffix)
    return output
  elif isinstance(output, collections.Iterable):
    return [gen_output(x, subdir, suffix) for x in output]
  else:
    raise TypeError('expected str or Iterable')


def gen_objects(sources, subdir='obj', suffix=None):
  if not sources:
    return []
  basedir = path.commonpath(sources)
  objects = path.move(sources, basedir, path.join(module.__ident__, subdir))
  if suffix is not None:
    if callable(suffix):
      objects = [suffix(path.rmvsuffix(x)) for x in objects]
    else:
      objects = path.setsuffix(objects, suffix)
  return objects


class _BaseCompiler(object):
  ''' Base class for compilers that contains a `Framework` object in
  the `settings` member and can be used by subclasses to easily generate
  a `Framework.Join` object to read the settings. '''

  def __init__(self, **kwargs):
    super().__init__()
    self.settings = Framework(type(self).__name__, **kwargs)

  def __getitem__(self, key):
    return self.settings[key]

  def _settings(self, frameworks, kwargs):
    caller = magic.get_frame(1).f_code.co_name
    fwname = type(self).__name__ + '.' + caller
    frameworks = list(frameworks)
    frameworks.append(Framework(fwname, **kwargs))
    return Framework.Join(self.settings, *frameworks)

  def _warn_unused(self, join, kwargs, prefix):
    result = {}
    for key in kwargs:
      if key not in join.used_keys:
        result[key] = kwargs[key]
    warn.unused_kwargs(result, prefix)
