# -*- mode: python -*-
# Copyright (C) 2015  Niklas Rosenstein
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

from craftr import module, path, platform
import collections


def get_platform_toolset():
  ''' Based on the platform and environment variables, this function
  will return an object that may or may not have the following factory
  functions as attributes:

  - `AsmCompiler()`
  - `CCompiler()`
  - `CxxCompiler()`
  - `Linker()`
  - `Ar()`

  The factory functions take common option parameters into account,
  but the actual available options depend on the underlying implementation.
  Commonly, the following options are usually supported:

  - `program` (override the program to invoke, rather than the default)
  - `detect` (if True and supported, the implementation will detect the
    compiler programs version and eventually target architecture and raise
    an exception if that could not be done)

  Options that are not supported are usually accepted but a warning will
  be displayed in the console.
  '''

  if platform.name == 'Windows':
    from . import msvc as toolset
  else:
    raise EnvironmentError('platform "{0}" not supported'.format(platform.name))
  return toolset


def gen_output(output, subdir=None, suffix=None):
  if isinstance(output, str):
    if not path.isabs(output):
      pdir = path.join(module.__ident__, subdir) if subdir else module.__ident__
      output = path.join(pdir, output)
    if suffix is not None:
      if callable(suffix):
        output = suffix(output)
      else:
        output = path.addsuffix(output, suffix)
    return output
  elif isinstance(output, collections.Iterable):
    return [gen_output(x, subdir, suffix) for x in output]
  else:
    raise TypeError('expected str or Iterable')


def gen_objects(sources, subdir='obj', suffix=None):
  if not sources:
    return []
  basedir = path.commonpath(sources)
  objects = path.move(sources, basedir, path.join(module.__ident__, subdir))
  if suffix is not None:
    if callable(suffix):
      objects = [suffix(path.rmvsuffix(x)) for x in objects]
    else:
      objects = path.setsuffix(objects, suffix)
  return objects
