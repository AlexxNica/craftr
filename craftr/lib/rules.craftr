# -*- mode: python -*-
# Copyright (C) 2015  Niklas Rosenstein
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

from os import environ
from craftr import *
from craftr.ext import platform
import craftr
import sys


def run(program, *args, cwd=None, target_name=None):
  program = path.normpath(expand_inputs(program)[0])
  command = [program] + list(args)
  if cwd:
    if platform.name == 'Windows':
      command = ['cmd', '/c', 'cd', cwd, '&&'] + command
    else:
      shell = environ['SHELL']
      command = [shell, '-c', 'cd', cwd, '&&'] + command
  return Target(command, program, pool='console', name=target_name)


def pyfunc(func, args=(), inputs=(), outputs=None, target_name=None):
  builder = TargetBuilder(inputs, [], {}, name=target_name)
  func_name = module.project_name + '.' + builder.name
  if func_name in session.daemon_funcs:
    raise ValueError('daemon function {0!r} already registered'.format(func_name))
  args = craftr._check_list_of_str('args', args)
  session.daemon_funcs[func_name] = func
  command = [sys.executable, '-m', 'craftr.daemon', func_name]
  command += args
  return builder.create_target(command, outputs=outputs)
