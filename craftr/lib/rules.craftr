# -*- mode: python -*-
# Copyright (C) 2015  Niklas Rosenstein
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

__all__ = ['run', 'PythonTool', 'render_template']

from os import environ
from craftr import *
from craftr.ext import platform
from craftr.ext.compiler import gen_output

import abc
import craftr
import sys


def run(program, *args, inputs=None, outputs=None, cwd=None, target_name=None):
  ''' Create a :class:`Target` that runs *program* with the specified
  command-line *args*. The target will be executed in the Ninja ``console``
  pool. This is useful to avoid manually calling executables.

  .. code-block:: python

    main = ld.link(objects, ...)
    from craftr.ext import rules
    run = rules.run(main)
  '''

  if isinstance(program, Target):
    assert len(program.outputs) == 1
    program = path.abspath(program.outputs[0])

  command = [program] + list(args)
  if cwd:
    if platform.name == 'Windows':
      command = ['cmd', '/c', 'cd', cwd, shell.safe('&&')] + command
    else:
      command = [shell.safe('('), 'cd', cwd, shell.safe('&&')] + command + [shell.safe(')')]
  if not inputs:
    inputs = program
  return Target(command, inputs, outputs, pool='console', name=target_name)


class PythonTool(object):
  ''' Base class for Python tools. Python tools are class objects that
  can be invoked from Ninja through the Craftr RTS (Runtime Server)
  using socket communication and the ``craftr-rts-invoke`` command.

  .. note:: This class overrides ``__new__()`` and returns a
    :class:`Target` rather than an instance of :class:`PythonTool`.

  .. automethod:: __call__
  '''

  def __new__(cls, *args, **kwargs):
    instance = super().__new__(cls)
    instance.__init__(*args, **kwargs)
    builder = instance._builder
    del instance._builder
    session.rts_funcs[builder.fullname] = instance
    target = builder.create_target(
      ['craftr-rts-invoke', builder.fullname], outputs=instance._outputs)
    return target

  def __init__(self, inputs, outputs, frameworks=(), **kwargs):
    super().__init__()
    self._builder = TargetBuilder(inputs, frameworks, kwargs)
    self._outputs = outputs
    self.name = self._builder.fullname

  @abc.abstractmethod
  def __call__(self, args):
    ''' Called when the tool is invoked. *args* is a list of command-line
    arguments were passed additionally to ``craftr-rts-invoke``. This is
    just an empty list in most cases as the :class:`PythonTool` instance
    can save all data it needs in its attributes.

    .. important:: This method could be called in a threaded context.
      Don't import new modules and be thread-safe.
    '''


class render_template(PythonTool):
  ''' This is a simple Python tool that can render a template file
  to a new file given a set of key/value pairs. Variables in the template
  are references by `${KEY}$`. There is currently not escape mechanism
  implemented. '''

  def __init__(self, template, output, **context):
    super().__init__([template], [output])
    self.template = template
    self.output = output
    self.context = context

  def __call__(self, args):
    with open(self.template) as src:
      content = src.read()
    for key, value in self.context.items():
      key = '${' + key + '}$'
      content = content.replace(key, value)
    with open(self.output, 'w') as dst:
      dst.write(content)
