# -*- mode: python -*-
# Copyright (C) 2015  Niklas Rosenstein
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

from os import environ
from craftr import *
from craftr.ext import platform

import abc
import craftr
import sys


def run(program, *args, inputs=None, outputs=None, cwd=None, target_name=None):
  program = path.normpath(expand_inputs(program)[0])
  command = [program] + list(args)
  if cwd:
    if platform.name == 'Windows':
      command = ['cmd', '/c', 'cd', cwd, '&&'] + command
    else:
      shell = environ['SHELL']
      command = [shell, '-c', 'cd', cwd, '&&'] + command
  if not inputs:
    inputs = program
  return Target(command, inputs, outputs, pool='console', name=target_name)


class _PythonToolMeta(abc.ABCMeta):
  ''' Meta class for the `PythonTool` class. '''

  def __new__(metacls, name, bases, dict):
    tool_name = module.project_name + '.' + name
    cls = super().__new__(metacls, name, bases, dict)
    if not dict.get('__abstract__', False):
      if tool_name in session.daemon_funcs:
        raise ValueError('daemon_func {0!r} already registered'.format(tool_name))
      instance = cls(tool_name)
      session.daemon_funcs[tool_name] = instance.execute
      return instance
    return cls


class PythonTool(object, metaclass=_PythonToolMeta):
  ''' This is the base class for Python tools. A Python tool "simulates"
  a command-line tool that can be used in Ninja. The tool's code is
  executed in the original Craftr process and does not require a
  re-evaluation of the Craftr module, making this method very efficient. '''

  __abstract__ = True

  def __init__(self, name):
    ''' Called when the class is declared. There is only always a single
    instance of a `PythonTool`. '''

    self.name = name

  def __call__(self, *args, **kwargs):
    ''' This method is supposed to create a `craftr.Target` object
    for the Python tool from the specified *args* and *kwargs*. The
    default implementation calls `command()` to create the argument
    list for the command. '''

    assert self.name in session.daemon_funcs
    target = self.rule(*args, **kwargs)

    new_command = [sys.executable, '-m', 'craftr.daemon', self.name]
    new_command += target.command
    target.command = new_command

    if not target.description:
      target.description = 'craftr:' + self.name + '()'

    return target

  @abc.abstractmethod
  def rule(self, **kwargs):
    ''' This method is called from `__call__()` to create a Target.
    The `Target.command` list must not contain the tool-name. '''

    raise NotImplementedError

  @abc.abstractmethod
  def execute(self, args):
    raise NotImplementedError


class render_template(PythonTool):
  ''' This is a simple Python tool that can render a template file
  to a new file given a set of key/value pairs. Variables in the template
  are references by `${KEY}$`. There is currently not escape mechanism
  implemented. '''

  def rule(self, template, output, **context):
    command = ['$in', '$out']
    for key, value in context.items():
      assert '=' not in key
      command.append('{0}={1}'.format(key, value))
    return Target(command, template, output)

  def execute(self, args):
    with open(args[0], 'r') as src:
      content = src.read()
    for var in args[2:]:
      key, sep, value = var.partition('=')
      key = '${' + key + '}$'
      content = content.replace(key, value)
    with open(args[1], 'w') as dst:
      dst.write(content)
