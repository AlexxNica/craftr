# -*- mode: python -*-
# Copyright (C) 2016  Niklas Rosenstein
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

__all__ = ['CythonCompiler', 'PythonInfo']

from craftr import *
from craftr.ext import platform
from craftr.ext.compiler import gen_output_dir, gen_objects, BaseCompiler
from craftr.ext.python import get_python_config_vars, get_python_framework

import craftr
import re


class CythonCompiler(BaseCompiler):
  ''' Compiler interface for Cython. Note that this class does
  not provide functionality to actually compile the C/C++ source
  files generated by Cython.

  A small example:

  .. code:: python

    from craftr import path, options
    from craftr.ext.compiler.cython import cythonc

    c_files = cythonc.compile(
      py_sources = path.glob('mymodule/**/*.pyx'),
      python_version = int(options.get('python_version', 3)),
      fast_fail = True,
      cpp = True,
    )
  '''

  name = 'Cython'

  def __init__(self, program='cython', detect=True, **kwargs):
    super().__init__(program=program, **kwargs)
    self.version = None
    if detect:
      try:
        output = craftr.shell.pipe([program, '-V']).output
      except OSError as exc:
        pass
      else:
        match = re.match(r'cython\s+version\s+([\d\.]+)', output, re.I)
        if match:
          self.version = match.group(1)

  def compile(self, py_sources, outputs=None, frameworks=(), target_name=None, **kwargs):
    ''' Compile the specified *py_sources* files to C or C++ source files.

    :param py_sources: A list of ``.pyx`` or ``.py`` files.
    :param outputs: Override the output filenames. If omitted, default
      output filenames are generated.
    :param frameworks: List of additional frameworks.
    :param target_name: Alternative target name.
    :param include: Additional include directories for Cython.
    :param fast_fail: True to enable the ``--fast-fail`` flag.
    :param cpp: True to translate to C++ source files.
    :param additional_flags: List of additional flags for the Cython command.
    :param python_version: The Python version to build for (2 or 3).
      Defaults to 3.

    Produces the following meta variables in the returned target:

    * cython_outdir -- The common output directory of the Cython source files
    '''

    builder = self.builder(py_sources, frameworks, kwargs, name=target_name)

    cpp = builder.get('cpp', False)
    python_version = builder.get('python_version', 3)
    fast_fail = builder.get('fast_fail', False)

    if outputs is None:
      outputs = gen_objects(py_sources, 'cython', suffix='.cpp' if cpp else '.c')
    if python_version not in (2, 3):
      raise ValueError('invalid python_version: {0!r}'.format(python_version))

    include = set(builder.merge('include'))
    command = [builder['program'], '$in', '-o', '$out', '-' + str(python_version)]
    command += ['-I' + x for x in include]
    command += ['--fast-fail'] if fast_fail else []
    command += ['--cplus'] if cpp else []
    command += builder.merge('additional_flags')

    # xxx: Determine the Python Framework and add it to the target!

    builder.meta['cython_outdir'] = gen_output_dir('cython')
    return builder.create_target(command, outputs=outputs, foreach=True)

  def compile_project(self, sources, python_bin='python', cc=None, ld=None, defines=(), **kwargs):
    """
    Compile a set of Cython source files into dynamic libraries for the
    Python version specified with "python_bin".

    :param sources: A list of the `.pyx` source files.
    :param python_bin: The name of the Python executable to compile for.
    :param cc: Alternative C/C++ compiler implementation. Defaults
      to :data:`platform.cc`
    :param ld: Alternative linker implementation. Defaults to
      :data:`platform.ld`
    :param defines: Additional defines for the compiler invokation.
    :return: A tuple of two elements: 1) The target returned by
      :meth:`compile` and 2) a list of targets returned by the
      ``ld.link()`` function
    """

    if cc is None:
      cc = platform.cc
    if ld is None:
      ld = platform.ld

    py = PythonInfo(python_bin)
    pyxc_sources = self.compile(
      py_sources = sources,
      python_version = py.major_version,
      **kwargs
    )

    # Separately compile all source files.
    link_targets = []
    for pyxfile, cfile in zip(pyxc_sources.inputs, pyxc_sources.outputs):
      link_targets.append(ld.link(
        output = path.setsuffix(pyxfile, py.conf['SO']),
        output_type = 'dll',
        keep_suffix = True, # don't let link() replace the suffix
        inputs = cc.compile(
          sources = [cfile],
          frameworks = [py.fw],
          pic = True,
          defines = defines
        )
      ))

    return pyxc_sources, link_targets


class PythonInfo(object):
  """
  Container class for meta information of an installed Python
  version. The information is read from the :mod:`craftr.ext.python`
  module.

  .. attribute:: fw

    The framework retrieved with :func:`get_python_framework`

  .. attribute:: conf

    The Python version's setuptools configuration retrieved with
    :mod:`get_python_config_vars`.
  """

  def __init__(self, pybin):
    self.conf = get_python_config_vars(pybin)
    self.fw = get_python_framework(pybin)

  @property
  def major_version(self):
    """
    Returns the major version number of the Python installation.
    """

    return int(self.conf['VERSION'][0])


cythonc = CythonCompiler()
