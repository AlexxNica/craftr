# craftr_module(compiler.msvc)
#
# Copyright (C) 2015 Niklas Rosenstein
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

from craftr.utils.lists import autoexpand

name = 'MSVC'
c = ['cl', '/nologo']
cxx = ['cl', '/nologo']
compile_only = '/c'
w_all = '/Wall'
obj_out = lambda x: '/Fo' + x
bin_out = lambda x: '/Fe' + x

cinc = lambda l: autoexpand((('/I', x) for x in autoexpand(l)))
cdef = lambda l: autoexpand((('/D', x) for x in autoexpand(l)))

ar = lambda out: ['lib', '/nologo', '/OUT:' + out]

def std(name):
  return None

detected = False
version = None
arch = None

def detect():
  import re
  from craftr.utils.shell import Process

  if detected:
    return

  try:
    p = Process(['cl', '/?'])
  except (Process.ExitCodeError, OSError) as exc:
    error('MSVC Compiler could not be detected. ({0})'.format(exc))

  m = re.search('compiler\s+version\s*([\d\.]+)\s*for\s*(\w+)', p.stderr, re.I)
  if not m:
    error('MSVC Compiler could not be detected. (unexpected output)')

  self.version = m.group(1)
  self.arch = m.group(2)
  self.detected = True
