# Copyright (C) 2015 Niklas Rosenstein
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#
# craftr_module(compiler.gcc)

from craftr.utils.lists import autoexpand

# We could be on Mac in which case we'd rather use Clang.
P = load_module('platform')
if P.name == 'Darwin':
  extends('compiler.clang')
  return_()

name = 'GCC'
c = 'gcc'
cxx = 'g++'
compile_only = '-c'
w_all = '-Wall'
obj_out = lambda x: ['-o', x]
bin_out = lambda x: ['-o', x]

cinc = lambda l: autoexpand((('-I', x) for x in autoexpand(l)))
cdef = lambda l: autoexpand((('-D', x) for x in autoexpand(l)))

ar = lambda out: ['ar', 'rcs', out]

def std(name):
  return '-std=' + name

detected = False
version = None
arch = None

def detect():
  import re
  from craftr.utils.shell import Process

  if detected:
    return

  try:
    p = Process([c, '-v'])
  except (Process.ExitCodeError, OSError) as exc:
    error('GCC Compiler could not be detected. ({0})'.format(exc))

  mv = re.search('gcc version ([\d\.]+)', p.stderr)
  mt = re.search('Target: (\w+)', p.stderr)
  if not mv:
    error('GCC version could not be detected.')
  if not mt:
    error('GCC target architecture could not be detected.')

  self.version = mv.group(1)
  self.arch = mt.group(1)
  self.detected = True
