# craftr_module(rules)
#
# Copyright (C) 2015 Niklas Rosenstein
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
''' This craftr module provides a collection of simple rules that are
not categorized for a specific language and can be useful in any kind
of environment. '''

from craftr.runtime import Target
from craftr import utils


def run(executable, additional_flags=(), pool='console',
    no_dependency=False, target_name=None, module=None,
    unique_name=None, **kwargs):
  ''' Create a target that invokes the *executable* with the
  *additional_flags* as its parameters. If *no_dependency* is True,
  the *executable* will not be listed as an input file.

  If *unique_name* is specified, it will be listed as the output
  file of the target to make the target runnable by invoking ninja
  with the *unique_name*. This name should not collide with any
  other output file or unique name in other modules. '''

  module = utils.get_calling_module(module)
  executable = autoexpand(executable)
  if len(executable) != 1:
    raise ValueError('expected exactly one item for *executable*')
  target_name = utils.get_assigned_name(utils.get_module_frame(module))
  if unique_name is None:
    # The name without _ appended is arleady taken by the actual target
    # name. We need that name since the target *outputs* define the
    # name of the target to pass to Ninja.
    unique_name = module.identifier + '.' + target_name
  return module.target(
    name = target_name,
    inputs = [] if no_dependency else executable,
    outputs = [unique_name],
    command = autoexpand([executable, additional_flags]),
    pool = pool,
    meta_no_phony = True,
    **kwargs
  )
