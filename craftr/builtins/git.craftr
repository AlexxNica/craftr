# craftr_module(git)
#
# Copyright (C) 2015 Niklas Rosenstein
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
'''
A very small interface for querying information about a Git repository.

    git = load_module('git').Git(project_dir)
    info('Current Version:', git.describe())
    if git.status(exclude='??'):
      info('Unversioned changes present.')
'''

class Git(object):

  def __init__(self, git_dir):
    super().__init__()
    self.git_dir = git_dir

  def _popen(self, *args, **kwargs):
    return Process(*args, pipe=True, cwd=self.git_dir, **kwargs)

  def status(self, include=None, exclude=None):
    result = []
    output = self._popen(['git', 'status', '--porcelain']).stdout
    for line in output.split('\n'):
      status, filename = line[:2].strip(), line[3:]
      if not status or not filename:
        continue
      if include is not None and status not in include:
        continue
      if exclude is not None and status in exclude:
        continue
      result.append((status, filename))
    return result

  def describe(self, mode='tags', all=False):
    if mode not in ('tags', 'contains'):
      raise ValueError('invalid describe mode {!r}'.format(mode))
    command = ['git', 'describe', '--{}'.format(mode)]
    if all:
      command.append('--all')
    return self._popen(command).stdout.strip()
